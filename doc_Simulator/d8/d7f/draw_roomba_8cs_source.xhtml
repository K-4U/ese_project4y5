<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.3.1"/>
<title>ESE Project 4: Simulator/drawObjects/drawRoomba.cs Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">ESE Project 4
   </div>
   <div id="projectbrief">Simulator</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="../../index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="../../namespaces.xhtml"><span>Packages</span></a></li>
      <li><a href="../../annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="../../files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="../../search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="../../search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="../../files.xhtml"><span>File&#160;List</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('d8/d7f/draw_roomba_8cs_source.xhtml','../../');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Properties</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">drawRoomba.cs</div>  </div>
</div><!--header-->
<div class="contents">
<a href="../../d8/d7f/draw_roomba_8cs.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;ï»¿using System;</div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="keyword">using</span> System.Collections.Generic;</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">using</span> System.Drawing;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="keyword">using</span> System.Linq;</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">using</span> System.Text;</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="keyword">using</span> System.Threading.Tasks;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">using</span> System.Diagnostics;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">namespace </span>Simulator.drawObjects {</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml">   10</a></span>&#160;    <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml">drawRoomba</a> : <a class="code" href="../../d9/d92/class_simulator_1_1draw_objects_1_1draw_object.xhtml">drawObject</a> {</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> roombaWidthInPx = 26;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> roombaHeightInPx = 26;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">double</span> WHEELBASE = 25.8;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> WHEELWIDTH = 10;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">double</span> TIMEFACTOR = 0.01;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">bool</span> drawPath = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keywordtype">int</span> MAXLENGTHOFPATH = 2500;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;        <span class="keyword">struct </span>wheel {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;            <span class="keyword">public</span> <span class="keywordtype">double</span> speed;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;            <span class="keyword">public</span> PointF pos;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;            <span class="keyword">public</span> Pen p;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;        }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;        </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        <span class="keyword">private</span> PointF centerPoint;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        <span class="keyword">private</span> List&lt;PointF&gt; paths;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="keyword">private</span> <span class="keyword">new</span> Pen p = Pens.Blue;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keyword">private</span> <span class="keywordtype">double</span> angle;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keyword">private</span> RectangleF innerLoc;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keyword">private</span> <span class="keywordtype">bool</span> isDriving = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keyword">private</span> wheel leftWheel;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">private</span> wheel rightWheel;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keyword">private</span> PointF wheelPos;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a1659ad4e462332195b7ba372f03bd9a4">   38</a></span>&#160;        <span class="keyword">public</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml">drawRoomba</a>(<span class="keywordtype">int</span> x, <span class="keywordtype">int</span> y, <span class="keywordtype">int</span> angle)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            : base(x, y, roombaWidthInPx, roombaHeightInPx) {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            this.innerLoc = <span class="keyword">new</span> RectangleF(base.loc.X + 2, base.loc.Y + 2, roombaWidthInPx - 4, roombaHeightInPx - 4);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            this.angle = angle;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            this.leftWheel.pos.X = x;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            this.leftWheel.pos.Y = y + (roombaHeightInPx / 2);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            this.leftWheel.p = Pens.Green;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            this.rightWheel.pos.X = x + roombaWidthInPx;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            this.rightWheel.pos.Y = y + (roombaHeightInPx / 2);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            this.rightWheel.p = Pens.Red;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            this.wheelPos = degreesToXY(this.angle + 90, WHEELWIDTH);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            this.centerPoint.X = base.loc.X + (base.loc.Width / 2);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            this.centerPoint.Y = base.loc.Y + (base.loc.Height / 2);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            this.paths = <span class="keyword">new</span> List&lt;PointF&gt;();</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        }</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a559e717c17f6a67c13d4f2cf12045bae">   59</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a559e717c17f6a67c13d4f2cf12045bae">draw</a>(Graphics g) {</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            <span class="comment">//Do not touch this!</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            g.DrawArc(this.p, base.loc, 0, 360);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            g.DrawArc(this.p, this.innerLoc, (<span class="keywordtype">int</span>)(this.angle - 90) - 22, 45);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">if</span> (drawPath) {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">if</span> (this.paths.Count &gt; 1) {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    g.DrawLines(Pens.Red, <span class="keyword">this</span>.paths.ToArray());</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                }</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="comment">//Comment this for no wheels</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="comment">/*g.DrawLine(this.leftWheelPen, this.leftWheel.pos.X - (this.wheelPos.X / 2), this.leftWheel.pos.Y - (this.wheelPos.Y / 2),</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">                this.leftWheel.pos.X + (this.wheelPos.X / 2), this.leftWheel.pos.Y + (this.wheelPos.Y / 2));</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">            g.DrawLine(this.rightWheelPen, this.rightWheel.pos.X - (this.wheelPos.X / 2), this.rightWheel.pos.Y - (this.wheelPos.Y / 2),</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">                this.rightWheel.pos.X + (this.wheelPos.X / 2), this.rightWheel.pos.Y + (this.wheelPos.Y / 2));</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">            //Comment this for no axis</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">            g.DrawLine(this.p, this.leftWheel.pos, this.rightWheel.pos);*/</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div>
<div class="line"><a name="l00079"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a8ec86f4eeec3654d29e1094138ef2096">   79</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a8ec86f4eeec3654d29e1094138ef2096">checkCollision</a>(RectangleF toCheck) {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            RectangleF collisionArea = RectangleF.Intersect(base.loc, toCheck);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">if</span> (!collisionArea.IsEmpty) {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="comment">//TODO: Check WHERE it collides, trigger appropiate sensor</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                <span class="comment">//For now, just print it</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                Debug.WriteLine(<span class="stringliteral">&quot;Roomba collided!&quot;</span>);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a6197b274c97e24c38201269311661a82">   88</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#a6197b274c97e24c38201269311661a82">_reset</a>() {</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            this.setSpeed(0, 0);</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            this.centerPoint.X = base.loc.X;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            this.centerPoint.Y = base.loc.Y;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            calculateTravelDistance();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keyword">private</span> <span class="keyword">static</span> PointF degreesToXY(<span class="keywordtype">double</span> degrees, <span class="keywordtype">double</span> radius) {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordtype">double</span> dividor = Math.PI / 180.0;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordtype">double</span> radians = degrees * dividor;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            PointF result = <span class="keyword">new</span> PointF();</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            result.X = (float) (Math.Cos(radians) * radius);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            result.Y = (float) (Math.Sin(radians) * radius);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> doAdd(ref PointF target, PointF toAdd) {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            target.X += toAdd.X;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            target.Y += toAdd.Y;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        }</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keyword">private</span> <span class="keywordtype">void</span> calculateTravelDistance() {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="comment">//Calculate the angle at which the roomba is turning. angleAdj.</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="comment">//We know that the difference between the wheels will give us a</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            <span class="comment">//Triangle with equivalent legs</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="comment">//When we aply some magic formulas to that(see below)</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="comment">//We get the angle the roomba has rotated</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="comment">//double d = (this.leftWheel.speed - this.rightWheel.speed) / 2;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="comment">//double f = (d / WHEELBASE);</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            <span class="comment">//double angleAdj = (Math.Tanh(f) * (180 / Math.PI));</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="comment">//angleAdj = angleAdj * 2;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="comment">//We then add that to the global angle</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment">//if (this.leftWheel.speed &lt; 0 || this.rightWheel.speed &gt; 0) {</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                <span class="comment">//this.angle -= angleAdj;</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="comment">//} else if (this.leftWheel.speed &gt; 0 || this.rightWheel.speed &lt; 0) {</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="comment">//this.angle += angleAdj;</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="comment">//}</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="comment">//Now, we calculate the position that one of the wheels move</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordtype">double</span> leftWheelSpeed = Math.Abs(leftWheel.speed);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordtype">double</span> rightWheelSpeed = Math.Abs(rightWheel.speed);</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordtype">double</span> rotationPointOnAxis = 0;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordtype">double</span> smallestSpeedAbs = (leftWheelSpeed &lt; rightWheelSpeed ? leftWheelSpeed : rightWheelSpeed);</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordtype">double</span> biggestSpeedAbs = (smallestSpeedAbs == leftWheelSpeed ? rightWheelSpeed : leftWheelSpeed);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">if</span> (leftWheelSpeed != rightWheelSpeed) {</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                <span class="keywordtype">double</span> negativeOrPositive = (rightWheelSpeed &gt; leftWheelSpeed ? -1 : 1);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                rotationPointOnAxis = negativeOrPositive * (100 - ((smallestSpeedAbs / biggestSpeedAbs) * 100));</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            rotationPointOnAxis = (double) ( ( ( (<span class="keywordtype">double</span>)rotationPointOnAxis + 100) / 200) * WHEELBASE);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordtype">double</span> distanceTraveled = ((leftWheel.speed + rightWheel.speed) / 2); <span class="comment">//Divided by 100 because speed is in seconds, and this function is in 0.01 seconds</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordtype">double</span> dDistance = leftWheel.speed - rightWheel.speed;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            <span class="comment">//Calculate the angle at which the roomba is turning. angleAdj.</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="comment">//We know that the difference between the wheels will give us a</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            <span class="comment">//Triangle with equivalent legs</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="comment">//When we aply some magic formulas to that(see below)</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="comment">//We get the angle the roomba has rotated</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordtype">double</span> d = dDistance / 2;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="comment">//double f = (d / rotationPointOnAxis);</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordtype">double</span> f = (d / WHEELBASE);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordtype">double</span> sinCalc = Math.Asin(f);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordtype">double</span> angleAdj = ((sinCalc / Math.PI) * 180);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            angleAdj = angleAdj * 2;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="comment">//We then add that to the global angle</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="comment">//if (this.leftWheel.speed &lt; 0 || this.rightWheel.speed &gt; 0) {</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                <span class="comment">//this.angle -= angleAdj;</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="comment">//} else if (this.leftWheel.speed &gt; 0 || this.rightWheel.speed &lt; 0) {</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                this.angle += angleAdj;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="comment">//}</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="comment">//Basespeed + diff and angle</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="comment">//Centerpoint stays on the same spot on the axis</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="comment">//This means that it travels the distance that both wheels travel on their own</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="comment">//Including the HALF of the distance the fastest wheel moves away.</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            PointF newPoint = degreesToXY((<span class="keywordtype">float</span>)this.angle - 90, distanceTraveled);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            doAdd(ref this.centerPoint, newPoint);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            base.loc.X = this.centerPoint.X - (base.loc.Width / 2);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            base.loc.Y = this.centerPoint.Y - (base.loc.Height / 2);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="comment">//Add the current location to a list.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="comment">//That way we can see where we have been :D</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="comment">//YAY :D</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">if</span> (this.paths.Count == 0) {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="comment">//Always add</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                this.paths.Add(centerPoint);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (this.paths.Count &gt; 0) {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">if</span> (!this.paths[this.paths.Count - 1].Equals(centerPoint)) {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    this.paths.Add(centerPoint);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">if</span> (this.paths.Count &gt; MAXLENGTHOFPATH) {</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    this.paths.RemoveAt(0);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                }</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="comment">//Innerloc is a rectangle which holds a smaller circle.</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="comment">//This circle shows you which direction the roomba is heading</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            this.innerLoc = <span class="keyword">new</span> RectangleF(base.loc.X + 2, base.loc.Y + 2, roombaWidthInPx - 4, roombaHeightInPx - 4);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="comment">//wheelPos will hold a small line that shows the direction of the wheels</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            this.wheelPos = degreesToXY(this.angle + 90, WHEELWIDTH);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#ae2f1185d88027dceeada9ac7d9dfca1d">  202</a></span>&#160;        <span class="keyword">public</span> <span class="keyword">override</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#ae2f1185d88027dceeada9ac7d9dfca1d">timer</a>(<span class="keywordtype">int</span> ms) {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordtype">bool</span> doRedraw = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span> (ms == 500) {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ms == 10) {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                doRedraw = isDriving;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">if</span> (this.isDriving) {</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                    calculateTravelDistance();</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            <span class="keywordflow">return</span> doRedraw;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#af2db2f43a5a0a2ad1c94b6d0fef356cd">  215</a></span>&#160;        <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d07/class_simulator_1_1draw_objects_1_1draw_roomba.xhtml#af2db2f43a5a0a2ad1c94b6d0fef356cd">setSpeed</a>(<span class="keywordtype">int</span> left, <span class="keywordtype">int</span> right) {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            isDriving = (left != 0 || right != 0);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            this.leftWheel.speed = ((double)left / 10) *TIMEFACTOR; <span class="comment">// Divided by 10 for the scale</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            this.rightWheel.speed = ((double)right / 10) *TIMEFACTOR;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_02de32643c62db6df59640b35d9a9cf0.xhtml">Simulator</a></li><li class="navelem"><a class="el" href="../../dir_2d817e41ca203892b20a90b2bfe2c008.xhtml">drawObjects</a></li><li class="navelem"><a class="el" href="../../d8/d7f/draw_roomba_8cs.xhtml">drawRoomba.cs</a></li>
    <li class="footer">Generated on Mon May 13 2013 10:40:00 for ESE Project 4 by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.3.1 </li>
  </ul>
</div>
</body>
</html>
